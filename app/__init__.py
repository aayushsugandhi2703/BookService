import os
from flask import Flask
import logging
from logging.handlers import RotatingFileHandler

def create_app():
    app = Flask(__name__)

    # Configurations
    from config import Config
    app.config.from_object(Config)

    # Initialize JWT with the app
    from flask_jwt_extended import JWTManager
    jwt = JWTManager(app)

    # initialize the limiter 
    from flask_limiter import Limiter
    from flask_limiter.util import get_remote_address
    limiter = Limiter(key_func=get_remote_address, default_limits=["200 per day", "50 per hour"])
    limiter.init_app(app)

    #initialize the logging
    from logging.handlers import RotatingFileHandler
    import logging
    def set_logger(logger):
        #Logging is skipped in app.debug:development or app.testing:testing modes to avoid unnecessary clutter.
        if not app.debug and not app.testing:
            if not os.path.exists('logs'): #checks if the logs directory exists
                os.mkdir('logs')
            file_handler = RotatingFileHandler('logs/app.log', maxBytes=10240, backupCount=10)
            file_handler.setFormatter(logging.Formatter('{"time": "%(asctime)s", "level": "%(levelname)s", "name": "%(name)s", "message": "%(message)s"}'))
            file_handler.setLevel(logging.INFO)
            #Ensures all log messages generated by app.logger are processed by this handler          
            app.logger.addHandler(file_handler)
            #Sets the global log level for the app logger.
            app.logger.setLevel(logging.INFO)
            app.logger.info('App startup')
    set_logger(app.logger)

    # Import and register blueprints
    from app.auth.routes import auth_bp
    from app.book.routes import book_bp
    from app.review.routes import review_bp

    app.register_blueprint(auth_bp, url_prefix='/')
    app.register_blueprint(book_bp, url_prefix='/book')
    app.register_blueprint(review_bp, url_prefix='/review')

    return app
